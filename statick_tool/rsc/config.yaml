levels:
  sei_cert:
    reporting:
      print_to_console:
      write_jenkins_warnings_ng:
    tool:
      make:
        flags: "-Wcast-align -Wchar-subscripts -Wformat-security -Wformat -Wimplicit-int -Wincompatible-pointer-types -Wint-conversion -Wint-to-pointer-cast -Wparentheses -Winvalid-offsetof -Wsequence-point -Wdelete-incomplete -Wdelete-non-virtual-dtor -Winvalid-offsetof -Wreorder -Wreturn-type -Wuninitialized -Wunused-parameter -Wunreachable-code -Wunused-value -Wvarargs -Wtrigraphs -Wvarargs -Wformat -Wcast-qual"
      clang-tidy:
        flags: "-checks='cert*,clang-analyzer-alpha.cplusplus.virtualCall,clang-analyzer-alpha.security.ArrayBoundV2,clang-analyzer-core.UndefinedBinaryOperatorResult,clang-analyzer-cplusplus.NewDelete,clang-analyzer-cplusplus.NewDeleteLeaks,clang-analyzer-unix.MismatchedDeallocatorclang-analyzer-unix.Malloc,misc-new-delete-overheads,misc-non-copyable-objects,misc-static-assert,clang-diagnostic-dangling-initializer-list,clang-diagnostic-delete-incomplete,clang-diagnostic-delete-non-virtual-dtor,clang-diagnostic-dynamic-class-memaccess,clang-diagnostic-exceptions,clang-diagnostic-implicit-int,clang-diagnostic-incompatible-pointer-types,clang-diagnostic-incompatible-pointer-types-discards-qualifiers,clang-diagnostic-int-conversion,clang-diagnostic-int-to-pointer-castclang-diagnostic-invalid-noreturn,clang-diagnostic-invalid-offsetof,clang-diagnostic-mismatched-new-delete,clang-diagnostic-parentheses,clang-diagnostic-reorder,clang-diagnostic-reserved-id-macro,clang-diagnostic-return-type,clang-diagnostic-sometimes-uninitialized,clang-diagnostic-unevaluated-expression,clang-diagnostic-uninitialized,clang-diagnostic-unsequenced,clang-diagnostic-user-defined-literals,clang-diagnostic-varargs,clang-diagnostic-vexing-parse,clang-diagnostic-trigraphs,clang-diagnostic-unreachable-code,clang-diagnostic-format,clang-diagnostic-cast-align,clang-diagnostic-cast-qual,clang-diagnostic-format-security,clang-diagnostic-sequence-point,clang-diagnostic-char-subscripts,clang-diagnostic-unused-parameter,clang-diagnostic-unused-value'"
      spotbugs:
        flags: ""
        include: "spotbugs-security.xml"
      flawfinder:
        flags: ""
      cppcheck:
        flags: "-j 4 --enable=warning --config-exclude=/usr --template='[{file}:{line}]: ({severity} {id}) {message}'"
      bandit:
        flags: ""
      perlcritic:
        flags: "--brutal --theme='bugs || certrule || certrec'"

  threshold:
    reporting:
      print_to_console:
      write_jenkins_warnings_ng:
    tool:
      pylint:
        flags: "--disable=R,I,C0200,C0302,C0330,C0411,C0412,W0141,W0142,W0511,W0703,W1202
                --max-line-length=100
                --good-names=f,x,y,z,t,dx,dy,dz,dt,i,j,k,ex,Run,_
                --dummy-variables-rgx='(_+[a-zA-Z0-9]*?$$)|dummy*'"
      make:
        flags: "-Wall -Wextra -Wuninitialized -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-parameter"
      catkin_lint:
        flags: "-W2 --ignore DESCRIPTION_BOILERPLATE,DESCRIPTION_MEANINGLESS,GLOBAL_VAR_COLLISION,LINK_DIRECTORY,LITERAL_PROJECT_NAME,TARGET_NAME_COLLISION"
      cppcheck:
        flags: "-j 4 --suppress=unreadVariable --suppress=unusedPrivateFunction --suppress=unusedStructMember
                --enable=warning,style --config-exclude=/usr --template='[{file}:{line}]: ({severity} {id}) {message}'"
      cpplint:
        # These flags must remain on one line to not break the flag parsing
        flags: "--filter=-build/header_guard,-build/include,-build/include_order,-build/c++11,-readability/function,-readability/streams,-readability/todo,-readability/namespace,-readability/multiline_comment,-readability/fn_size,-readability/alt_tokens,-readability/braces,-readability/inheritance,-runtime/indentation_namespace,-runtime/int,-runtime/threadsafe_fn,-runtime/references,-runtime/array,-whitespace,-legal"

  third_party_modified:
    inherits_from: "threshold"
    tool: {}

  objective_minus_pylint:
    inherits_from: "threshold"
    tool:
      clang-tidy:
        # These flags must remain on one line to not break the flag parsing
        # cert-err58-cpp gives unwanted error for pluginlib code
        flags: "-checks='*,-boost-use-to-string,-cert-err58-cpp,-cert-err60-cpp,-clang-analyzer-deadcode.DeadStores,-clang-analyzer-alpha.deadcode.UnreachableCode,-clang-analyzer-optin.performance.Padding,-cppcoreguidelines-*,-google-default-arguments,-google-readability-namespace-comments,-google-runtime-int,-google-runtime-references,-llvm-include-order,-llvm-namespace-comment,-modernize-*,-misc-misplaced-widening-cast,-misc-unused-parameters,-readability-else-after-return'"
      xmllint:
        flags: ""
      yamllint:
        flags: "-d '{extends: default,
                     rules: {
                       colons: {max-spaces-before: 0, max-spaces-after: -1},
                       commas: disable,
                       document-start: disable,
                       line-length: disable}}'"
      cmakelint:
        flags: "--spaces=2 --filter=-linelength,-whitespace/indent"

  objective:
    inherits_from: "objective_minus_pylint"
    tool:
      pylint:
        # Flags to maybe remove at a future date
        #  R0101 too-many-nested-blocks
        #  C0200 consider-using-enumerate
        #  C0330 bad-continuation
        flags: "--disable=R0101,C0200,C0330,I0011,I0012,W0141,W0142,W0511
                --max-line-length=100
                --good-names=f,x,y,z,t,dx,dy,dz,dt,i,j,k,ex,Run,_
                --dummy-variables-rgx='(_+[a-zA-Z0-9]*?$$)|dummy*'"

  objective_with_format:
    inherits_from: "objective"
    tool:
      clang-format:
        flags: ""

  objective_with_format_minus_pylint:
    inherits_from: "objective_minus_pylint"
    tool:
      clang-format:
        flags: ""

  rosm_threshold:
    reporting:
      print_to_console:
      write_jenkins_warnings_ng:
    tool:
      clang-tidy:
        # These flags must remain on one line to not break the flag parsing
        # cert-err58-cpp gives unwanted error for pluginlib code
        flags: "-checks='*,-cert-dcl50-cpp,-Wreserved-id-macro,-Weverything,-Wuser-defined-literals,-Wvexing-parse,-Misc-new-delete-overloads,-Cert-dcl59-cpp,-Wunsequenced,-analyzer-checker=cplusplus,-Wunevaluated-expression,-Wuniinitialized,-clang-analyzer-core.UndefinedBinaryOperatorResult,-Wdangling-initializer-list,-Wdelete-incomplete,-Wvarargs,-Winvalid-offsetof,-Wdynamic-class-memaccess,-wparentheses,-Wint-to-pointer-cast,-Wint-conversion,-Wincompatible-pointer-types,Clang-analyzer-cplusplus.NewDelete clang-analyzer-alpha.security.ArrayBoundV2,Clang-analyzer-cplusplus.NewDeleteLeaks-Wmismatched-new-delete,clang-analyzer-unix.MismatchedDeallocator,Clang-analyzer-unix.Malloc,Misc-non-copyable-objects,Cert-err52-cpp,-Wexceptions,Cert-err58-cpp,Cert-err60-cpp,Cert-err34-c,Cert-err34-c,-Clang-analyzer-alpha.cplusplus.VirtualCall,-Wdelete-non-virtual-dtor,-Wreorder,Cert-msc50-cpp,-Wreturn-type,-Winvalid-noreturn,Cert-msc30-c,Cert-flp30-c,Cert-env33-c'"
      make:
        flags: "-Wcast-align -Wstrict-prototypes -Wchar-subscripts -Wformat-security -Wformat"

  rosm_objective:
    inherits_from: "objective"
    tool:
      make:
        flags: "-Wall -Wextra -Wuninitialized -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-parameter -Wcast-align -Wstrict-prototypes -Wchar-subscripts -Wcast-align -Wstrict-prototypes -Wchar-subscripts -Wformat-security -Wformat"
      clang-tidy:
        # These flags must remain on one line to not break the flag parsing
        # cert-err58-cpp gives unwanted error for pluginlib code
        flags: "-checks='*,-cert-dcl50-cpp,-Wreserved-id-macro,-Weverything,-Wuser-defined-literals,-Wvexing-parse,-Misc-new-delete-overloads,-Cert-dcl59-cpp,-Wunsequenced,-analyzer-checker=cplusplus,-Wunevaluated-expression,-Wuniinitialized,-clang-analyzer-core.UndefinedBinaryOperatorResult,-Wdangling-initializer-list,-Wdelete-incomplete,-Wvarargs,-Winvalid-offsetof,-Wdynamic-class-memaccess,-wparentheses,-Wint-to-pointer-cast,-Wint-conversion,-Wincompatible-pointer-types,Clang-analyzer-cplusplus.NewDelete clang-analyzer-alpha.security.ArrayBoundV2,Clang-analyzer-cplusplus.NewDeleteLeaks-Wmismatched-new-delete,clang-analyzer-unix.MismatchedDeallocator,Clang-analyzer-unix.Malloc,Misc-non-copyable-objects,Cert-err52-cpp,-Wexceptions,Cert-err58-cpp,Cert-err60-cpp,Cert-err34-c,Cert-err34-c,-Clang-analyzer-alpha.cplusplus.VirtualCall,-Wdelete-non-virtual-dtor,-Wreorder,Cert-msc50-cpp,-Wreturn-type,-Winvalid-noreturn,Cert-msc30-c,Cert-flp30-c,Cert-env33-c'"

  self_check:
    reporting:
      print_to_console:
    tool:
      mypy:
        flags: "--ignore-missing-imports"
      pydocstyle:
        flags: ""
      pyflakes:
        flags: ""
      # Disabling bad-continuation so black formatting will work.
      # https://github.com/psf/black/blob/master/README.md#how-black-wraps-lines
      # https://github.com/psf/black/issues/48
      # https://github.com/PyCQA/pylint/issues/289
      # Disabling unsubscriptable-object as it has issues in Python 3.9 with type hints, among other false positives.
      # https://github.com/PyCQA/pylint/issues/3139
      # https://github.com/PyCQA/pylint/issues/3882
      pylint:
        flags: "--good-names=f,i,j,k,ex,_
                --disable=bad-continuation,unsubscriptable-object
               "
      shellcheck:
        flags: ""
      uncrustify:
        flags: ""
      xmllint:
        flags: ""
      yamllint:
        flags: "-d '{extends: default,
                     rules: {
                       colons: {max-spaces-before: 0, max-spaces-after: -1},
                       commas: disable,
                       document-start: disable,
                       line-length: disable}}'"

  documentation:
    reporting:
      print_to_console:
    discovery:
      markdown:
        flags: ""
    tool:
      markdownlint:
        flags: ""

  ultimate:
    reporting:
      print_to_console:
      write_jenkins_warnings_ng:
    tool:
      bandit:
        flags: ""
      catkin_lint:
        flags: "-W2 --ignore DESCRIPTION_BOILERPLATE,DESCRIPTION_MEANINGLESS,GLOBAL_VAR_COLLISION,LINK_DIRECTORY,LITERAL_PROJECT_NAME,TARGET_NAME_COLLISION"
      clang-format:
        flags: ""
      clang-tidy:
        flags: "-checks='cert*,clang-analyzer-alpha.cplusplus.virtualCall,clang-analyzer-alpha.security.ArrayBoundV2,clang-analyzer-core.UndefinedBinaryOperatorResult,clang-analyzer-cplusplus.NewDelete,clang-analyzer-cplusplus.NewDeleteLeaks,clang-analyzer-unix.MismatchedDeallocatorclang-analyzer-unix.Malloc,misc-new-delete-overheads,misc-non-copyable-objects,misc-static-assert,clang-diagnostic-dangling-initializer-list,clang-diagnostic-delete-incomplete,clang-diagnostic-delete-non-virtual-dtor,clang-diagnostic-dynamic-class-memaccess,clang-diagnostic-exceptions,clang-diagnostic-implicit-int,clang-diagnostic-incompatible-pointer-types,clang-diagnostic-incompatible-pointer-types-discards-qualifiers,clang-diagnostic-int-conversion,clang-diagnostic-int-to-pointer-castclang-diagnostic-invalid-noreturn,clang-diagnostic-invalid-offsetof,clang-diagnostic-mismatched-new-delete,clang-diagnostic-parentheses,clang-diagnostic-reorder,clang-diagnostic-reserved-id-macro,clang-diagnostic-return-type,clang-diagnostic-sometimes-uninitialized,clang-diagnostic-unevaluated-expression,clang-diagnostic-uninitialized,clang-diagnostic-unsequenced,clang-diagnostic-user-defined-literals,clang-diagnostic-varargs,clang-diagnostic-vexing-parse,clang-diagnostic-trigraphs,clang-diagnostic-unreachable-code,clang-diagnostic-format,clang-diagnostic-cast-align,clang-diagnostic-cast-qual,clang-diagnostic-format-security,clang-diagnostic-sequence-point,clang-diagnostic-char-subscripts,clang-diagnostic-unused-parameter,clang-diagnostic-unused-value,-boost-use-to-string,-cert-err58-cpp,-cert-err60-cpp,-clang-analyzer-deadcode.DeadStores,-clang-analyzer-alpha.deadcode.UnreachableCode,-clang-analyzer-optin.performance.Padding,-cppcoreguidelines-*,-google-default-arguments,-google-readability-namespace-comments,-google-runtime-int,-google-runtime-references,-llvm-include-order,-llvm-namespace-comment,-modernize-*,-misc-misplaced-widening-cast,-misc-unused-parameters,-readability-else-after-return'"
      cmakelint:
        flags: "--spaces=2 --filter=-linelength,-whitespace/indent"
      cppcheck:
        flags: "-j 4 --enable=warning --config-exclude=/usr --template='[{file}:{line}]: ({severity} {id}) {message}' -j 4 --suppress=unreadVariable --suppress=unusedPrivateFunction --suppress=unusedStructMember --enable=warning,style --config-exclude=/usr --template='[{file}:{line}]: ({severity} {id}) {message}'"
      cpplint:
        flags: "--filter=-build/header_guard,-build/include,-build/include_order,-build/c++11,-readability/function,-readability/streams,-readability/todo,-readability/namespace,-readability/multiline_comment,-readability/fn_size,-readability/alt_tokens,-readability/braces,-readability/inheritance,-runtime/indentation_namespace,-runtime/int,-runtime/threadsafe_fn,-runtime/references,-runtime/array,-whitespace,-legal"
      spotbugs:
        flags: ""
        include: "spotbugs-security.xml"
      flawfinder:
        flags: ""
      lizard:
        flags: ""
      make:
        flags: "-Wcast-align -Wchar-subscripts -Wformat-security -Wformat -Wimplicit-int -Wincompatible-pointer-types -Wint-conversion -Wint-to-pointer-cast -Wparentheses -Winvalid-offsetof -Wsequence-point -Wdelete-incomplete -Wdelete-non-virtual-dtor -Wreorder -Wreturn-type -Wuninitialized -Wunused-parameter -Wunreachable-code -Wunused-value -Wvarargs -Wtrigraphs -Wcast-qual -Wall -Wextra -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-parameter"
      pycodestyle:
        flags: ""
      pydocstyle:
        flags: ""
      pyflakes:
        flags: ""
      pylint:
        flags: ""
      # Not using uncrustify since it is duplicated and not totally compatible with clang-format.
      # uncrustify:
      #   flags: ""
      xmllint:
        flags: ""
      yamllint:
        flags: "-d '{extends: default,
                     rules: {
                       colons: {max-spaces-before: 0, max-spaces-after: -1},
                       commas: disable,
                       document-start: disable,
                       line-length: disable}}'"

  tex:
    reporting:
      print_to_console:
    tool:
      chktex:
        flags: ""
      lacheck:
        flags: ""

  tex_with_pylint:
    inherits_from: "tex"
    tool:
      pylint:
        flags: "--good-names=f,i,j,k,x,y,z,ex,_"

  unit_tests:
    tool:
      clang-format:
        version: "6.0"
      clang-tidy:
        version: "6.0"
